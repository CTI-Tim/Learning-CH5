import { Ch5Signal } from '../ch5-core';
import { Subject } from 'rxjs';
import { Ch5CommonLog } from './ch5-common-log';
import { ICh5CommonAttributes, TCh5ShowType, TCh5ProcessUriParams } from './interfaces';
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
export interface ICh5AttributeAndPropertySettings {
    default: any;
    valueOnAttributeEmpty: any;
    variableName: string;
    attributeName: string;
    propertyName: string;
    removeAttributeOnNull: boolean;
    type: string;
    enumeratedValues: any[];
    componentReference: any;
    callback?: any;
}
export declare class Ch5Common extends HTMLElement implements ICh5CommonAttributes {
    static DIRECTION: string[];
    protected static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    protected readonly COMMON_PROPERTIES: {
        SHOW: ICh5AttributeAndPropertySettings;
        DISABLED: ICh5AttributeAndPropertySettings;
    };
    private showTypes;
    private _ignoreAttributes;
    primaryCssClass: string;
    currentLanguage: string | null;
    translatableObjects: any;
    childrenOfCurrentNode: [HTMLElement] | null;
    _class: string;
    _style: string;
    protected _id: string;
    protected _customClass: string;
    protected _prevAddedCustomClasses: string[];
    protected _customStyle: string;
    protected _prevAddedStyle: string;
    protected _show: boolean;
    protected _noshowType: TCh5ShowType;
    protected _disabled: boolean;
    private _gestureable;
    protected _receiveStateCustomClass: string;
    protected _subKeySigReceiveCustomClass: string;
    protected _receiveStateCustomStyle: string;
    protected _subKeySigReceiveCustomStyle: string;
    protected _receiveStateShow: string;
    protected _subKeySigReceiveShow: string;
    protected _receiveStateShowPulse: string;
    protected _subKeySigReceiveShowPulse: string;
    protected _receiveStateHidePulse: string;
    protected _nextSiblingIndexInParentChildNodes: number;
    protected _subKeySigReceiveHidePulse: string;
    protected _receiveStateEnable: string;
    protected _subKeySigReceiveEnable: string;
    protected _sigNameSendOnShow: string;
    protected _sigSendOnShow: Ch5Signal<boolean> | null;
    protected _onrelease: {};
    protected _onpress: {};
    protected _isDebugEnabled: boolean;
    protected _isTraceEnabled: boolean;
    protected _listOfAllPossibleComponentCssClasses: string[];
    protected _crId: string;
    protected _ch5Id: number;
    private readonly _cssClassHideVisibility;
    private readonly _cssClassHideDisplay;
    protected _cachedParentEl: Node | null;
    protected _cachedNextSibling: Node | null;
    protected _isDetachedFromDom: boolean;
    protected _keepListeningOnSignalsAfterRemoval: boolean;
    protected _targetElementForCssClassesAndStyle: HTMLElement | null;
    observableGestureableProperty: Subject<boolean>;
    protected _wasInstatiated: boolean;
    protected wasInstantiatedInViewport: boolean;
    protected _appendClassWhenInViewPort: string;
    elementIsInViewPort: boolean;
    elementIntersectionEntry: IntersectionObserverEntry;
    elementIsVisible: boolean;
    logger: Ch5CommonLog;
    private _commonMutationObserver;
    protected set ignoreAttributes(value: string[]);
    protected get ignoreAttributes(): string[];
    set customClass(value: string);
    get customClass(): string;
    set customStyle(value: string);
    get customStyle(): string;
    set show(value: boolean);
    get show(): boolean;
    set noshowType(value: TCh5ShowType);
    get noshowType(): TCh5ShowType;
    set disabled(value: boolean);
    get disabled(): boolean;
    set gestureable(value: boolean);
    get gestureable(): boolean;
    set receiveStateCustomClass(value: string);
    get receiveStateCustomClass(): string;
    set receiveStateCustomStyle(value: string);
    get receiveStateCustomStyle(): string;
    set receiveStateEnable(value: string);
    get receiveStateEnable(): string;
    set receiveStateHidePulse(value: string);
    get receiveStateHidePulse(): string;
    set receiveStateShowPulse(value: string);
    get receiveStateShowPulse(): string;
    set receiveStateShow(value: string);
    get receiveStateShow(): string;
    set sendEventOnShow(value: string);
    get sendEventOnShow(): string;
    set sigNameSendOnShow(value: string);
    get sigNameSendOnShow(): string;
    set onrelease(callback: {});
    get onrelease(): {};
    set onpress(callback: {});
    get onpress(): {};
    set appendClassWhenInViewPort(value: string);
    get appendClassWhenInViewport(): string;
    constructor();
    static getMeasurementUnitFromSizeValue(sizeValue: string): string;
    static extractMeasurementNumber(sizeValue: string): number;
    static getMeasurementPxNumber(sizeValue: string): number;
    static convertAltUnitsToPx(sizeValue: string): number;
    static convertPxUnitToAlt(px: number, measurementUnit: string): number;
    static convertVhUnitsToPx(vh: number): number;
    static convertVwUnitsToPx(vw: number): number;
    static convertPxUnitToVh(px: number): number;
    static convertPxUnitToVw(px: number): number;
    static handlingTextTransformValue(value: string, textTransform: string): string;
    static processUri(processUriParams: TCh5ProcessUriParams): void | string;
    static isNil(value: any, validateWithTrim?: boolean): boolean;
    static isNotNil(value: any, validateWithTrim?: boolean): boolean;
    _t(valueToTranslate: string): string;
    resolveTemplateChildren(template: HTMLTemplateElement): void;
    _getTranslatedValue(valueToSave: string, valueToTranslate: string): string;
    static get observedAttributes(): string[];
    getCrId(): string;
    info(message?: any, ...optionalParams: any[]): void;
    error(message: any, ...optionalParams: any[]): void;
    isDebug(): boolean;
    isTrace(): boolean;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected cacheComponentChildrens(): void;
    protected repaint(): void;
    protected updateCssClasses(el?: HTMLElement): void;
    protected updateForChangeInCustomCssClass(): void;
    protected updateForChangeInStyleCss(): void;
    protected updateForChangeInShowStatusOld(): void;
    protected updateForChangeInShowStatus(): void;
    protected handleHide(targetElement: HTMLElement): void;
    protected handleShow(targetElement: HTMLElement): void;
    protected beforeHandlingShow(): void;
    protected afterHandlingShow(): void;
    protected beforeHandlingHide(): void;
    protected afterHandlingHide(): void;
    protected updateForChangeInDisabledStatus(): void;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected _checkAndSetStringValue(value: any, defaultValue?: string): string;
    protected clearStringSignalSubscription(sigName: string | null | undefined, subscriptionKey: string): void;
    protected clearBooleanSignalSubscription(sigName: string | null | undefined, subscriptionKey: string): void;
    protected clearNumberSignalSubscription(sigName: string, subscriptionKey: string): void;
    protected sendShowSignal(value: boolean): void;
    protected attributeChangeHandler(attr: string, oldValue: string, newValue: string): string;
    protected applyPreConfiguredAttributes(): void;
    protected _attributeValueAsString(attrName: string): string;
    protected contentCleanUp(): void;
    getCssClassDisabled(): string;
    protected unsubscribeFromSignals(): void;
    debounce: (func: any, wait: number) => (...args: any[]) => void;
    protected toBoolean(val: any, isEmptyValueEqualToTrue?: boolean): boolean;
    protected translateCallback(section: string): void;
    protected componentLoadedEvent(elementName: string, idValue: string): void;
    protected updateInViewPortClass(): void;
    updateElementVisibility(visible: boolean): void;
    initCommonMutationObserver(element: Ch5Common): void;
    updateElementVisibilityInViewport(visibility: boolean): void;
    disconnectCommonMutationObserver(): void;
    checkIfValueIsTruey(str?: string): boolean;
    protected convertAnalogValueBasedOnSignalResponse(input: number): number;
    protected setAttributeAndProperty(property: ICh5AttributeAndPropertySettings, value: any, setFromSignal?: boolean): void;
}

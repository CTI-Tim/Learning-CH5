import { Ch5CommonInput } from "../ch5-common-input";
import { TCh5SliderHandleShape, TCh5SliderOrientation, TCh5SliderSize, TCh5SliderHandleSize, TCh5SliderStretch, TCh5SliderToolTipShowType, TCh5SliderToolTipDisplayType, TCh5SliderHandle } from './interfaces/t-ch5-slider';
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
import { ICh5SliderAttributes } from "./interfaces";
export interface IRcbSignal {
    rcb: {
        time: number;
        value: number;
        startt?: number;
        startv?: number;
    };
}
export interface IRcbUpdateValue {
    oldValue?: number;
    newValue: number;
}
export declare class Ch5Slider extends Ch5CommonInput implements ICh5SliderAttributes {
    static ELEMENT_NAME: string;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly MIN_VALUE: number;
    static readonly MAX_VALUE: number;
    static readonly DEFAULT_STEP: number;
    static readonly HANDLE_SHAPE: TCh5SliderHandleShape[];
    static readonly ORIENTATION: TCh5SliderOrientation[];
    static readonly SIZE: TCh5SliderSize[];
    static readonly HANDLE_SIZE: TCh5SliderHandleSize[];
    static readonly STRETCH: TCh5SliderStretch[];
    static readonly TOOL_TIP_SHOW_TYPE: TCh5SliderToolTipShowType[];
    static readonly TOOL_TIP_DISPLAY_TYPE: TCh5SliderToolTipDisplayType[];
    static readonly COMPONENT_DATA: any;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly OFFSET_THRESHOLD: number;
    private _render;
    private _ch5Properties;
    private isAdvancedSlider;
    private _elContainer;
    private _elTitleContainer;
    private _elSliderContainer;
    private _elOnContainer;
    private _elOffContainer;
    private _innerContainer;
    private _tgtEls;
    private _tooltip;
    private _sendEventValue;
    private _titlePresent;
    private _userLowValue;
    private _userHighValue;
    private isResizeInProgress;
    private readonly RESIZE_DEBOUNCE;
    primaryCssClass: string;
    private _wasRendered;
    private isSliderStarted;
    private sliderTouch;
    private _isPressedSubscription;
    private _repeatDigitalInterval;
    private _holdState;
    private _receiveStateValueSignal;
    private _subReceiveValueId;
    private _subReceiveAnalogValueId;
    private _receiveStateValueSignalHigh;
    private _subReceiveValueHighId;
    private _subReceiveAnalogValueHighId;
    private _pressable;
    sliderEvent: Event;
    sliderStartEvent: Event;
    sliderEndEvent: Event;
    focusEvent: Event;
    blurEvent: Event;
    changeEvent: Event;
    dirtyEvent: Event;
    cleanEvent: Event;
    protected _cleanValueHigh: (string | number);
    protected _dirtyValueHigh: (string | number);
    protected _dirtyTimerHandleHigh: number | null;
    protected _cleanLow: boolean;
    protected _dirtyLow: boolean;
    protected _cleanHigh: boolean;
    protected _dirtyHigh: boolean;
    private _animationTimer;
    private _tooltipValueFromSignal;
    private _tooltipHighValueFromSignal;
    private _rcbSignalValue;
    private _rcbSignalValueHigh;
    private _animatingHandle;
    set range(value: boolean);
    get range(): boolean;
    set showTickValues(value: boolean);
    get showTickValues(): boolean;
    set tapSettable(value: boolean);
    get tapSettable(): boolean;
    set handleShape(value: TCh5SliderHandleShape);
    get handleShape(): TCh5SliderHandleShape;
    set value(value: number);
    get value(): number;
    get valueHigh(): number;
    set valueHigh(value: number);
    set noHandle(value: boolean);
    get noHandle(): boolean;
    get max(): number;
    set max(value: number);
    get min(): number;
    set min(value: number);
    set orientation(value: TCh5SliderOrientation);
    get orientation(): TCh5SliderOrientation;
    set size(value: TCh5SliderSize);
    get size(): TCh5SliderSize;
    set handleSize(value: TCh5SliderHandleSize);
    get handleSize(): TCh5SliderHandleSize;
    set step(value: number);
    get step(): number;
    set stretch(value: TCh5SliderStretch);
    get stretch(): TCh5SliderStretch;
    set ticks(value: string);
    get ticks(): string;
    set toolTipShowType(value: TCh5SliderToolTipShowType);
    get toolTipShowType(): TCh5SliderToolTipShowType;
    set toolTipDisplayType(value: TCh5SliderToolTipDisplayType);
    get toolTipDisplayType(): TCh5SliderToolTipDisplayType;
    set sendEventOnChange(value: string);
    get sendEventOnChange(): string;
    set sendEventOnChangeHigh(value: string);
    get sendEventOnChangeHigh(): string;
    set sendEventOnHandleClick(value: string);
    get sendEventOnHandleClick(): string;
    get receiveStateValue(): string;
    set receiveStateValue(value: string);
    get receiveStateValueHigh(): string;
    set receiveStateValueHigh(value: string);
    set onOffOnly(value: boolean);
    get onOffOnly(): boolean;
    set receiveStateShowOnOffOnly(value: string);
    get receiveStateShowOnOffOnly(): string;
    set sendEventOnUpper(value: string);
    get sendEventOnUpper(): string;
    set sendEventOnLower(value: string);
    get sendEventOnLower(): string;
    constructor();
    static get observedAttributes(): string[];
    static registerSignalAttributeTypes(): void;
    connectedCallback(): void;
    protected eventBinding(): void;
    private setCleanValue;
    disconnectedCallback(): void;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    unsubscribeFromSignals(): void;
    private clearComponentContent;
    getCssClassDisabled(): string;
    submit(): void;
    reset(): void;
    setClean(): void;
    setDirty(): void;
    protected setDirtyValue(handle: TCh5SliderHandle, value: (number | string)[]): void;
    protected updateForChangeInDisabledStatus(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected updateCssClasses(): void;
    protected attachEventListeners(): void;
    removeEvents(): void;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    private createSlider;
    private _renderPromise;
    private onWindowResizeHandler;
    private _subscribeToPressableIsPressed;
    private _unsubscribeFromPressableIsPressed;
    private _setSliderValue;
    private _onSliderSlide;
    private _onSliderStart;
    private _onSliderStop;
    private _onSliderChange;
    private _onFocus;
    private _onTouchMoveEnd;
    private _onTouchHandler;
    private _onMouseLeave;
    private _onBlur;
    private _applyHandleValueToComponent;
    private _sendHandleValueSignal;
    private _sendValueForChangeSignal;
    private _sendHighValueForChangeSignal;
    private _setDirtyHandler;
    private _onDirtyTimerFinished;
    private _maybeSetComponentClean;
    private _parsedSliderOptions;
    private _getRangeFromPips;
    private _maybeSetMinAndMaxFromPips;
    private _parsedTicks;
    private _setDirtyHigh;
    private _setDirtyLow;
    private _setCleanLow;
    private _setCleanHigh;
    private _toolTipDisplayTypeFormatter;
    private _tooltipValueToPercent;
    private _connectDisplayFormatter;
    private _startRcbAnimation;
    private _stopRcbAnimation;
    private _setStyleParameters;
    private subscribeToAnalogSignal;
    private subscribeToAnalogHighSignal;
    private unsubscribeFromAnalogSignals;
    private unsubscribeFromObjectSignals;
    private _applyTooltipValue;
    private _calculatedValueWhileInRamp;
    private _calculatedHighValueWhileInRamp;
    private _applySignalReceivedBeforeRender;
    private _adjustTooltipValue;
    private _getStartValue;
    private _getStartValueWhileInRamp;
    private handleHandleShape;
    private handleSendEvent;
    private sendEventOnHandleClickHandle;
    private handleValue;
    private handleValueHigh;
    private handleMax;
    private handleMin;
    private handleOrientation;
    private sizeHandler;
    private handleHandleSize;
    private handleStretch;
    private stretchHandler;
    private handleOnOffOnly;
    private handleTapSettable;
    private handleToolTipShowType;
    private onOffButtonHelper;
    private titleHelper;
    protected helper(elem: HTMLElement, val: HTMLElement): void;
    setValues(elem: string, val: HTMLElement): void;
    private handleToolTipDisplayType;
}

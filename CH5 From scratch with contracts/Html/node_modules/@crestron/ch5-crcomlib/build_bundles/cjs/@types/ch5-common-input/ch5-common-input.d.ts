import { Ch5Common } from "../ch5-common/ch5-common";
import HtmlCallback from "../ch5-common/utils/html-callback";
import { ICh5CommonInputAttributes } from "./interfaces/i-ch5-common-input-attributes";
import { TCh5CommonInputFeedbackModes } from "./interfaces/t-ch5-common-input";
export declare abstract class Ch5CommonInput extends Ch5Common implements ICh5CommonInputAttributes {
    static FEEDBACKMODES: TCh5CommonInputFeedbackModes[];
    protected _elInput: HTMLInputElement;
    protected _signalValueSyncTimeout: number;
    protected _cleanValue: (string | number | boolean);
    protected _clean: boolean;
    protected _dirtyValue: (string | number | boolean);
    protected _dirty: boolean;
    protected _submitted: boolean;
    protected _dirtyTimerHandle: number | null;
    protected _feedbackMode: TCh5CommonInputFeedbackModes;
    protected _value: (string | number | boolean);
    protected _required: boolean;
    protected _ondirtyCallback: HtmlCallback | {};
    protected _oncleanCallback: HtmlCallback | {};
    constructor();
    abstract submit(): void;
    abstract reset(): void;
    getDirty(): boolean;
    get feedbackMode(): TCh5CommonInputFeedbackModes;
    set feedbackMode(mode: TCh5CommonInputFeedbackModes);
    get signalValueSyncTimeout(): number | string;
    set signalValueSyncTimeout(value: number | string);
    set cleanValue(value: (string | number | boolean));
    get cleanValue(): (string | number | boolean);
    set dirtyValue(value: (string | number | boolean));
    get dirtyValue(): string | number | boolean;
    set value(value: (string | number | boolean));
    get value(): (string | number | boolean);
    setValue(value: string | number): void;
    getValue(): string | number | boolean;
    set required(required: boolean);
    get required(): boolean;
    set oncleanCallback(callback: HtmlCallback | {});
    get oncleanCallback(): HtmlCallback | {};
    set onclean(callback: {});
    get onclean(): {};
    set ondirtyCallback(callback: HtmlCallback | {});
    get ondirtyCallback(): HtmlCallback | {};
    set ondirty(callback: {});
    get ondirty(): {};
    setClean(): void;
    setDirty(): void;
    getValid(): boolean;
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected initAttributes(): void;
    protected runEventHandlers(handler: string, event?: Event): void;
    private runOncleanHandler;
    private runOndirtyHandler;
}

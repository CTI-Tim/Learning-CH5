import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { ICh5ColorPickerAttributes } from './interfaces/i-ch5-color-picker-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5ColorPicker extends Ch5Common implements ICh5ColorPickerAttributes {
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-color-picker";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    private _elColorPicker;
    private redValue;
    private greenValue;
    private blueValue;
    private redValuePrevious;
    private greenValuePrevious;
    private blueValuePrevious;
    private pickerId;
    private colorPicker;
    private _colorChangedSubscription;
    private readonly COLOR_BLACK;
    private _dirty;
    private isSendReceiveSignalEqual;
    private sendingValue;
    private receiveingValue;
    private _cleanValue;
    private debounceSendSignals;
    private debounceSetColor;
    set maxValue(value: number);
    get maxValue(): number;
    set receiveStateRedValue(value: string);
    get receiveStateRedValue(): string;
    set receiveStateGreenValue(value: string);
    get receiveStateGreenValue(): string;
    set receiveStateBlueValue(value: string);
    get receiveStateBlueValue(): string;
    set sendEventColorRedOnChange(value: string);
    get sendEventColorRedOnChange(): string;
    set sendEventColorGreenOnChange(value: string);
    get sendEventColorGreenOnChange(): string;
    set sendEventColorBlueOnChange(value: string);
    get sendEventColorBlueOnChange(): string;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setColor;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
    private handleSendSignals;
}

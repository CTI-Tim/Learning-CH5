import { Ch5CommonInput } from "../ch5-common-input/ch5-common-input";
import HtmlCallback from "../ch5-common/utils/html-callback";
import { ICh5TextInputAttributes, TCh5TextInputIconPosition, TCh5TextInputSize, TCh5TextInputStretch, TCh5TextInputTextTransform, TCh5TextInputType } from "./interfaces";
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
export declare class Ch5TextInput extends Ch5CommonInput implements ICh5TextInputAttributes {
    constructor();
    static get observedAttributes(): string[];
    set tabIndex(index: number);
    get tabIndex(): number;
    set placeholder(value: string);
    get placeholder(): string;
    set iconClass(icon: string);
    get iconClass(): string;
    set icon(icon: string);
    get icon(): string;
    set iconPosition(position: TCh5TextInputIconPosition);
    get iconPosition(): TCh5TextInputIconPosition;
    set inputType(type: TCh5TextInputType);
    get inputType(): TCh5TextInputType;
    set minLength(length: number);
    get minLength(): number;
    set maxLength(length: number);
    get maxLength(): number;
    set minValue(minValue: number);
    get minValue(): number;
    set maxValue(maxValue: number);
    get maxValue(): number;
    set stretch(value: TCh5TextInputStretch | null);
    get stretch(): TCh5TextInputStretch | null;
    set textTransform(style: TCh5TextInputTextTransform);
    get textTransform(): TCh5TextInputTextTransform;
    set label(text: string);
    get label(): string;
    set pattern(value: string);
    get pattern(): string;
    set sendEventOnChange(value: string);
    get sendEventOnChange(): string;
    set sendEventOnFocus(value: string);
    get sendEventOnFocus(): string;
    set sendEventOnBlur(value: string);
    get sendEventOnBlur(): string;
    set receiveStateFocus(value: string);
    get receiveStateFocus(): string;
    set receiveStateValue(value: string);
    get receiveStateValue(): string;
    set validityChangeEvent(inEvent: CustomEvent);
    get validityChangeEvent(): CustomEvent;
    set dirtyCustomEvent(inEvent: CustomEvent);
    get dirtyCustomEvent(): CustomEvent;
    set cleanCustomEvent(inEvent: CustomEvent);
    get cleanCustomEvent(): CustomEvent;
    set lastValidState(state: boolean);
    get lastValidState(): boolean;
    set mask(mask: string);
    get mask(): string;
    set size(size: TCh5TextInputSize);
    get size(): TCh5TextInputSize;
    set scaling(scale: boolean);
    get scaling(): boolean;
    set minimumFontSize(fontSize: number);
    get minimumFontSize(): number;
    set onvaliditychange(callback: HtmlCallback | ((this: any, arg: any) => void));
    get onvaliditychange(): HtmlCallback | ((this: any, arg: any) => void);
    static readonly ELEMENT_NAME = "ch5-textinput";
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static TYPES: TCh5TextInputType[];
    static SIZES: TCh5TextInputSize[];
    static STRETCH: TCh5TextInputStretch[];
    static TEXTTRANSFORM: TCh5TextInputTextTransform[];
    static ICONPOSITION: TCh5TextInputIconPosition[];
    static readonly COMPONENT_DATA: any;
    static COMPONENT_CONTENT_POSTFIX: string;
    primaryCssClass: string;
    protected _elInput: HTMLInputElement;
    private _elIcon;
    private _labelElement;
    private _placeholder;
    private _mask;
    private _inputType;
    private _pattern;
    protected _tabIndex: number;
    private _iconClass;
    private _icon;
    private _iconPosition;
    private _minLength;
    private _maxLength;
    private _minValue;
    private _maxValue;
    private _size;
    private _stretch;
    private _scaling;
    private _minimumFontSize;
    private _scalingUtility;
    private _maskingUtility;
    private _textTransform;
    private _label;
    private _sendEventOnChange;
    private _sendEventOnFocus;
    private _sendEventOnBlur;
    private _receiveStateFocus;
    private _receiveStateFocusSub;
    private _receiveStateValue;
    private _receiveStateValueSub;
    private _validityChangeEvent;
    private _dirtyCustomEvent;
    private _cleanCustomEvent;
    private _lastValidState;
    private _onFocusListener;
    private _onBlurListener;
    private _onChangeListener;
    private _onKeyPressListener;
    private _assetsWrapper;
    private _onvaliditychange;
    static registerSignalAttributeTypes(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    unsubscribeFromSignals(): void;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    setValue(value: string): void;
    submit(): void;
    dirtyTimerHandle(): void;
    valueSync(): void;
    getCssClassDisabled(): string;
    reset(): void;
    updateValue(value: string, signalResult?: boolean): void;
    focusTheInput(value: boolean): void;
    getValid(): boolean;
    _onKeyPress(inEvent: Event): void;
    _onChange(inEvent: Event): void;
    protected highlightInputIfNotValid(): void;
    protected handleModifierClass(className: string, action?: string): void;
    _onFocus(inEvent: Event): void;
    _onBlur(inEvent: Event): void;
    protected _onChangeSignal(currentElement: HTMLElement, value: string): void;
    protected clearComponentContent(): void;
    protected createInternalHTML(): void;
    protected iconPositioning(): void;
    protected iconPositioningHandler(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEvents(): void;
    private _maskInit;
    private _createValidityChangeEvent;
    private _createDirtyCustomEvent;
    private _createCleanCustomEvent;
    private _createCustomEvent;
    private _addLabel;
    private _addModifierClass;
    private _removeModifierClass;
    private _addAriaAttributes;
}

import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5TextHorizontalAlignment, TCh5TextVerticalAlignment } from './interfaces/t-ch5-text';
import { ICh5TextAttributes } from './interfaces/i-ch5-text-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5Text extends Ch5Common implements ICh5TextAttributes {
    static readonly HORIZONTAL_ALIGNMENT: TCh5TextHorizontalAlignment[];
    static readonly VERTICAL_ALIGNMENT: TCh5TextVerticalAlignment[];
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-text";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    private _elSpan;
    templateElement: HTMLTemplateElement;
    set horizontalAlignment(value: TCh5TextHorizontalAlignment);
    get horizontalAlignment(): TCh5TextHorizontalAlignment;
    set verticalAlignment(value: TCh5TextVerticalAlignment);
    get verticalAlignment(): TCh5TextVerticalAlignment;
    set multilineSupport(value: boolean);
    get multilineSupport(): boolean;
    set truncateText(value: boolean);
    get truncateText(): boolean;
    set label(value: string);
    get label(): string;
    set receiveStateLabel(value: string);
    get receiveStateLabel(): string;
    set labelInnerHtml(value: string);
    get labelInnerHtml(): string;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private handleHorizontalAlignment;
    private handleVerticalAlignment;
    private handleMultilineSupport;
    private handleTruncateText;
    private handleLabel;
    private decodeInnerHTMLForAttribute;
    private updateCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
    fitEllipsisForMultiline(): void;
    getLineHeight(el: HTMLElement): string;
    getLineHeightSuper(element: HTMLElement): number;
    getContainerHeight(element: HTMLElement): number;
    private onWindowResizeHandler;
}

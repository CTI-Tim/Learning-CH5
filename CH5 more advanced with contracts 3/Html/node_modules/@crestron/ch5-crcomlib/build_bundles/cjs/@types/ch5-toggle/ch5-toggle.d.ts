import { Ch5CommonInput } from "../ch5-common-input/ch5-common-input";
import { ICh5ToggleAttributes, TCh5ToggleShape, TCh5ToggleOrientation, TCh5ToggleFeedbackMode } from "./interfaces";
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
export declare class Ch5Toggle extends Ch5CommonInput implements ICh5ToggleAttributes {
    get label(): string;
    set label(value: string);
    get labelOn(): string;
    set labelOn(value: string);
    get labelOff(): string;
    set labelOff(value: string);
    get iconOn(): string;
    set iconOn(value: string);
    get iconOff(): string;
    set iconOff(value: string);
    get handleShape(): TCh5ToggleShape;
    set handleShape(value: TCh5ToggleShape);
    get orientation(): TCh5ToggleOrientation;
    set orientation(value: TCh5ToggleOrientation);
    get value(): boolean;
    set value(value: boolean);
    get checked(): boolean | string;
    set checked(value: boolean | string);
    get direction(): string | null;
    set direction(value: string | null);
    get receiveStateValue(): string;
    set receiveStateValue(value: string);
    get receiveStateScriptLabelHtml(): string;
    set receiveStateScriptLabelHtml(value: string);
    get sendEventOnClick(): string;
    set sendEventOnClick(value: string);
    get sendEventOnTouch(): string;
    set sendEventOnTouch(value: string);
    constructor();
    static get observedAttributes(): string[];
    static readonly ELEMENT_NAME = "ch5-toggle";
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static SHAPES: TCh5ToggleShape[];
    static ORIENTATIONS: TCh5ToggleOrientation[];
    static MODES: TCh5ToggleFeedbackMode[];
    static readonly COMPONENT_DATA: any;
    private _elBody;
    private _elContainer;
    private _elLabel;
    private _elHandle;
    private _elOnContainer;
    private _elLabelOn;
    private _elIconOn;
    private _elOffContainer;
    private _elLabelOff;
    private _elIconOff;
    private _elKnob;
    primaryCssClass: string;
    private _label;
    private _labelOn;
    private _labelOff;
    private _iconOn;
    private _iconOff;
    private _handleShape;
    private _orientation;
    private _direction;
    protected _value: boolean;
    private _sigNameReceiveValue;
    private _subReceiveValueId;
    private _sigNameReceiveScriptLabelHtml;
    private _subReceiveScriptLabelHtmlId;
    private _sigNameSendOnClick;
    private _sigNameSendOnTouch;
    changeEvent: Event;
    dirtyEvent: Event;
    cleanEvent: Event;
    protected _dirty: boolean;
    protected _clean: boolean;
    protected _submitted: boolean;
    protected _dirtyValue: boolean | string;
    protected _cleanValue: boolean | string;
    protected _dirtyTimerHandle: number | null;
    static registerSignalAttributeTypes(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    unsubscribeFromSignals(): void;
    submit(): void;
    reset(): void;
    getDirty(): boolean;
    setDirty(): void;
    setClean(): void;
    getCssClassDisabled(): string;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected updateCssClasses(): void;
    protected attachEventListeners(): void;
    protected removeEvents(): void;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    private _generateListOfAllPossibleComponentCssClasses;
    private _onClick;
    toggleChecked(): void;
    private _setDirtyHandler;
    private _onDirtyTimerFinished;
    private _dispatchEvents;
    private _upgradeProperty;
    private sendSignalForClickAndTouch;
    private _sendValueForClickSignal;
    private _sendValueForTouchSignal;
}

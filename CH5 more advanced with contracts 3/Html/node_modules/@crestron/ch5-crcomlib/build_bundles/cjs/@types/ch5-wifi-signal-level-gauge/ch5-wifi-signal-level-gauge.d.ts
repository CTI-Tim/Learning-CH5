import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5WifiSignalLevelGaugeGaugeStyle, TCh5WifiSignalLevelGaugeAlignment, TCh5WifiSignalLevelGaugeSize } from './interfaces/t-ch5-wifi-signal-level-gauge';
import { ICh5WifiSignalLevelGaugeAttributes } from './interfaces/i-ch5-wifi-signal-level-gauge-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5WifiSignalLevelGauge extends Ch5Common implements ICh5WifiSignalLevelGaugeAttributes {
    static readonly MIN_NUMBER_OF_BARS: number;
    static readonly MAX_NUMBER_OF_BARS: number;
    static readonly GAUGE_STYLES: TCh5WifiSignalLevelGaugeGaugeStyle[];
    static readonly ALIGNMENTS: TCh5WifiSignalLevelGaugeAlignment[];
    static readonly SIZES: TCh5WifiSignalLevelGaugeSize[];
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-wifi-signal-level-gauge";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    private _elInnerContainer;
    private _elTopSignal;
    private _elMiddleSignal;
    private _elBottomSignal;
    set value(value: number);
    get value(): number;
    set receiveStateValue(value: string);
    get receiveStateValue(): string;
    set gaugeStyle(value: TCh5WifiSignalLevelGaugeGaugeStyle);
    get gaugeStyle(): TCh5WifiSignalLevelGaugeGaugeStyle;
    set alignment(value: TCh5WifiSignalLevelGaugeAlignment);
    get alignment(): TCh5WifiSignalLevelGaugeAlignment;
    set minValue(value: number);
    get minValue(): number;
    set maxValue(value: number);
    get maxValue(): number;
    set size(value: TCh5WifiSignalLevelGaugeSize);
    get size(): TCh5WifiSignalLevelGaugeSize;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private setContainerBorderWidth;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private handleGaugeStyle;
    private handleAlignment;
    private handleValue;
    private setClassForWifiBasedOnValue;
    private handleSize;
    private initCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
}

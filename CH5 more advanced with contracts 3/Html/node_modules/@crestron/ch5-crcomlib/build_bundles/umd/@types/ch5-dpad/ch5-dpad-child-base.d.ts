import { Ch5ButtonPressInfo } from "../ch5-button/ch5-button-pressinfo";
import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5Pressable } from "../ch5-common/ch5-pressable";
import { ICh5DpadChildBaseAttributes } from "./interfaces/i-ch5-dpad-child-base-attributes";
import { TCh5DpadButtonClassListType, TCh5DpadChildButtonType, TCh5DpadConstructorParam } from "./interfaces/t-ch5-dpad";
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5DpadChildBase extends Ch5Common implements ICh5DpadChildBaseAttributes {
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    readonly pressedCssClassPostfix = "--pressed";
    private readonly LABEL_CLASS;
    primaryCssClass: string;
    protected readonly TOUCH_TIMEOUT: number;
    protected readonly DEBOUNCE_PRESS_TIME: number;
    protected readonly PRESS_MOVE_THRESHOLD: number;
    protected readonly STATE_CHANGE_TIMEOUTS: number;
    protected readonly MAX_MODE_LENGTH: number;
    protected readonly DEBOUNCE_BUTTON_DISPLAY: number;
    protected COMPONENT_NAME: string;
    protected componentPrefix: string;
    protected readonly CSS_CLASS_LIST: TCh5DpadButtonClassListType;
    private _ch5Properties;
    protected _icon: HTMLElement;
    protected buttonType: TCh5DpadChildButtonType | null;
    protected isTouch: boolean;
    protected allowPress: boolean;
    protected allowPressTimeout: number;
    protected _intervalIdForRepeatDigital: number | null;
    protected _lastTapTime: number;
    protected _pressable: Ch5Pressable | null;
    protected _hammerManager: HammerManager;
    protected _pressTimeout: number;
    protected _pressed: boolean;
    protected _buttonPressedInPressable: boolean;
    private _isPressedSubscription;
    private _repeatDigitalInterval;
    protected _pressHorizontalStartingPoint: number | null;
    protected _pressVerticalStartingPoint: number | null;
    protected _pressInfo: Ch5ButtonPressInfo;
    set label(value: string);
    get label(): string;
    set key(value: TCh5DpadChildButtonType);
    get key(): TCh5DpadChildButtonType;
    set iconClass(value: string);
    get iconClass(): string;
    set iconUrl(value: string);
    get iconUrl(): string;
    set sendEventOnClick(value: string);
    get sendEventOnClick(): string;
    set pressed(value: boolean);
    get pressed(): boolean;
    constructor();
    protected initializeParams(params: TCh5DpadConstructorParam): void;
    connectedCallback(): void;
    protected createElementsAndInitialize(): void;
    protected createHtmlElements(): void;
    disconnectedCallback(): void;
    removeEventListeners(): void;
    unsubscribeFromSignals(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected updateCssClasses(): void;
    protected updatePressedClass(pressedClass: string): void;
    protected bindEventListenersToThis(): void;
    protected sendValueForRepeatDigital(value: boolean): void;
    protected _sendOnClickSignal(preventTrue?: boolean, preventFalse?: boolean): void;
    protected stopRepeatDigital(): void;
    private handleLabel;
    private handleKey;
    private handleIconClass;
    private handleIconUrl;
    private handlePressed;
    protected pressHandler(): Promise<boolean>;
    protected cancelPress(): void;
    protected reactivatePress(): void;
    protected isExceedingPressMoveThreshold(x1: number, y1: number, x2: number, y2: number): boolean;
    private _subscribeToPressableIsPressed;
    private _unsubscribeFromPressableIsPressed;
    protected _onTapAction(): void;
    protected _onPressClick(event: MouseEvent): Promise<void>;
    protected _onMouseUp(): void;
    protected _onPress(event: TouchEvent): Promise<void>;
    protected _onLeave(): void;
    protected _onPressUp(): void;
    protected _onTouchMove(event: TouchEvent): void;
    protected _onTouchEnd(): void;
    private getIconContainer;
    private getLabelContainer;
    private getImageContainer;
}

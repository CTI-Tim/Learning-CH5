import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5DateTimeStyleForDate, TCh5DateTimeHorizontalAlignment, TCh5DateTimeDisplayType } from './interfaces/t-ch5-datetime';
import { ICh5DateTimeAttributes } from './interfaces/i-ch5-datetime-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5DateTime extends Ch5Common implements ICh5DateTimeAttributes {
    static readonly STYLE_FOR_DATE: TCh5DateTimeStyleForDate[];
    static readonly HORIZONTAL_ALIGNMENT: TCh5DateTimeHorizontalAlignment[];
    static readonly DISPLAY_TYPE: TCh5DateTimeDisplayType[];
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-datetime";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    private dateTimeId;
    private componentFormat;
    private debounceRender;
    set display24HourFormat(value: boolean);
    get display24HourFormat(): boolean;
    set displayAmPm(value: boolean);
    get displayAmPm(): boolean;
    set displayTwoDigitsHour(value: boolean);
    get displayTwoDigitsHour(): boolean;
    set displaySeconds(value: boolean);
    get displaySeconds(): boolean;
    set styleForDate(value: TCh5DateTimeStyleForDate);
    get styleForDate(): TCh5DateTimeStyleForDate;
    set horizontalAlignment(value: TCh5DateTimeHorizontalAlignment);
    get horizontalAlignment(): TCh5DateTimeHorizontalAlignment;
    set displayType(value: TCh5DateTimeDisplayType);
    get displayType(): TCh5DateTimeDisplayType;
    set timeOffsetHours(value: number);
    get timeOffsetHours(): number;
    set receiveStateOffsetTime(value: string);
    get receiveStateOffsetTime(): string;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private changeTime;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private updateCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    private render;
    private calculateTimeOffset;
}

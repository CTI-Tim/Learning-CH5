import { Ch5Common } from "../ch5-common/ch5-common";
import { ICh5OverlayPanelAttributes, TCh5OverlayPanelOverflow, TCh5OverlayPanelPositionOffset, TCh5OverlayPanelStretch } from "./interfaces";
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
import { Ch5Properties } from "../ch5-core/ch5-properties";
export declare class Ch5OverlayPanel extends Ch5Common implements ICh5OverlayPanelAttributes {
    static readonly ELEMENT_NAME: string;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static POSITION_OFFSETS: TCh5OverlayPanelPositionOffset[];
    static STRETCHES: TCh5OverlayPanelStretch[];
    static OVERFLOWS: TCh5OverlayPanelOverflow[];
    static readonly COMPONENT_DATA: any;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    primaryCssClass: string;
    _ch5Properties: Ch5Properties;
    protected _elContainer: HTMLElement;
    protected _elContents: HTMLElement;
    protected _elCloseIcon: HTMLElement;
    protected _elCloseIconBtn: HTMLElement;
    protected _wasInstatiated: boolean;
    protected _isShown: boolean;
    protected _ready: Promise<any>;
    protected _showEvent: Event;
    protected _hideEvent: Event;
    protected _beforeShowEvent: Event;
    protected _afterShowEvent: Event;
    protected _beforeHideEvent: Event;
    protected _afterHideEvent: Event;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    set dismissable(value: boolean);
    get dismissable(): boolean;
    set closable(value: boolean);
    get closable(): boolean;
    set closeIcon(value: string);
    get closeIcon(): string;
    set stretch(value: TCh5OverlayPanelStretch | null);
    get stretch(): (TCh5OverlayPanelStretch | null);
    set overflow(value: TCh5OverlayPanelOverflow);
    get overflow(): TCh5OverlayPanelOverflow;
    set positionTo(value: string);
    get positionTo(): string;
    set positionOffset(value: TCh5OverlayPanelPositionOffset);
    get positionOffset(): TCh5OverlayPanelPositionOffset;
    set receiveStatePositionTo(value: string);
    get receiveStatePositionTo(): string;
    set receiveStatePositionOffset(value: string);
    get receiveStatePositionOffset(): string;
    set sendEventOnBeforeShow(value: string);
    get sendEventOnBeforeShow(): string;
    set sendEventOnAfterShow(value: string);
    get sendEventOnAfterShow(): string;
    set sendEventOnBeforeHide(value: string);
    get sendEventOnBeforeHide(): string;
    set sendEventOnAfterHide(value: string);
    get sendEventOnAfterHide(): string;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected _initialize(): void;
    protected generateListOfAllPossibleComponentCssClasses(): string[];
    unsubscribeFromSignals(): void;
    protected createInternalHtml(): void;
    protected updateCssClasses(): void;
    static get observedAttributes(): string[];
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected _rebindEventCallbacks(): void;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    protected _handleKeyPress(event: KeyboardEvent): void;
    protected _clickedOnClose(inEvent: Event): void;
    protected _getReadyCheckPromise(): Promise<any>;
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    protected updateForChangeInStretch(): void;
    protected updatePosition(): void;
    private handleCloseIcon;
    protected _dismissElement(inEvent: Event): void;
    protected _clickAndTouchEvent(event: Event): void;
    protected updateForChangeInClosable(): void;
    protected beforeHandlingShow(): void;
    protected afterHandlingShow(): void;
    protected beforeHandlingHide(): void;
    protected afterHandlingHide(): void;
    protected _onShow(inEvent: Event): void;
    protected _onHide(inEvent: Event): void;
    protected _onBeforeShow(inEvent: Event): void;
    protected _onAfterShow(inEvent: Event): void;
    protected _onBeforeHide(inEvent: Event): void;
    protected _onAfterHide(inEvent: Event): void;
    protected _sendPulse(sigName: string): void;
    private _insertAfter;
}

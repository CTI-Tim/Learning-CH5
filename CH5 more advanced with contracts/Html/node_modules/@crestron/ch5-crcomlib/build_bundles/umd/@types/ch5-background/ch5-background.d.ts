import { Ch5Common } from './../ch5-common/ch5-common';
import { ICh5BackgroundAttributes } from './interfaces/i-ch5-background-attributes';
import { TCh5BackgroundScale, TCh5BackgroundRepeat, TCh5BackgroundTransitionEffect } from './interfaces';
import { ICh5VideoBackground } from './../ch5-video/interfaces';
import { Ch5SignalElementAttributeRegistryEntries } from '../ch5-common/ch5-signal-attribute-registry';
export declare class Ch5Background extends Ch5Common implements ICh5BackgroundAttributes {
    static readonly ELEMENT_NAME = "ch5-background";
    static SCALE: TCh5BackgroundScale[];
    static REPEAT: TCh5BackgroundRepeat[];
    static REFRESHRATE: number;
    static IMGBGCOLOR: string;
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    primaryCssClass: string;
    parentCssClassPrefix: string;
    canvasCssClassPrefix: string;
    isCanvasCreated: boolean;
    private _elCanvas;
    private _canvasList;
    private _prevCanvasList;
    private _imgUrls;
    private _elImages;
    private _elBackupImages;
    private _bgColors;
    private _bgIdx;
    private _interval;
    private _videoRes;
    private _isVisible;
    private _videoDimensions;
    private _isRefilled;
    private isInitialized;
    private readonly VIDEO_ACTION;
    private MARK_COLORS;
    private _url;
    private _backgroundColor;
    private _repeat;
    private _scale;
    private _refreshRate;
    private _videoCrop;
    private _imgBackgroundColor;
    private _transitionEffect;
    private _transitionDuration;
    private _receiveStateRefreshRate;
    private _subReceiveRefreshRate;
    private _receiveStateUrl;
    private _sigNameReceiveUrl;
    private _subReceiveUrl;
    private _receiveStateBackgroundColor;
    private _subReceiveBackgroundColor;
    private _videoSubscriptionId;
    private _canvasSubscriptionId;
    static registerSignalAttributeTypes(): void;
    get url(): string;
    set url(value: string);
    get backgroundColor(): string;
    set backgroundColor(value: string);
    get repeat(): TCh5BackgroundRepeat | null;
    set repeat(value: TCh5BackgroundRepeat | null);
    get scale(): TCh5BackgroundScale;
    set scale(value: TCh5BackgroundScale);
    get refreshRate(): number;
    set refreshRate(value: number);
    get videoCrop(): string;
    set videoCrop(value: string);
    get imgBackgroundColor(): string;
    set imgBackgroundColor(value: string);
    get transitionEffect(): TCh5BackgroundTransitionEffect;
    set transitionEffect(value: TCh5BackgroundTransitionEffect);
    get transitionDuration(): string;
    set transitionDuration(value: string);
    set receiveStateRefreshRate(value: string);
    get receiveStateRefreshRate(): string;
    set receiveStateUrl(value: string);
    get receiveStateUrl(): string;
    set receiveStateBackgroundColor(value: string);
    get receiveStateBackgroundColor(): string;
    constructor();
    connectedCallback(): void;
    private isInViewport;
    videoBGRequest(request: ICh5VideoBackground): void;
    disconnectedCallback(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    unsubscribeFromSignals(): void;
    protected initAttributes(): void;
    protected updateBackground(): void;
    protected updateBackgroundForEachCanvas(canvas: HTMLCanvasElement, idx: number): void;
    private getBackgroundUrl;
    private getBackgroundColor;
    private scaleToFill;
    private scaleToFit;
    private scaleToStretch;
    private updateBgImageScale;
    private updateBgImageRepeat;
    private canvasTemplate;
    private manageVideoInfo;
    private isScrollBar;
    private setCanvasDimensions;
    private updateCanvasDimensions;
    private createCanvas;
    private setBgTransition;
    private setBgImage;
    private setBgImageByCanvas;
    private setBgColor;
    private setBgColorByCanvas;
    private videoBGUpdateAction;
    private updateBgColor;
    private changeBackground;
    private updateBgImage;
    refillBackground(): void;
    private videoBGAction;
    private isCanvasListValid;
}

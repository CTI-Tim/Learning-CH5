import { Ch5Common } from "../ch5-common/ch5-common";
import { Ch5SignalElementAttributeRegistryEntries } from "../ch5-common/ch5-signal-attribute-registry";
import { TCh5SegmentedGaugeOrientation, TCh5SegmentedGaugeGaugeLedStyle, TCh5SegmentedGaugeStateGraphic } from './interfaces/t-ch5-segmented-gauge';
import { ICh5SegmentedGaugeAttributes } from './interfaces/i-ch5-segmented-gauge-attributes';
import { ICh5PropertySettings } from "../ch5-core/ch5-property";
export declare class Ch5SegmentedGauge extends Ch5Common implements ICh5SegmentedGaugeAttributes {
    static readonly ORIENTATION: TCh5SegmentedGaugeOrientation[];
    static readonly GAUGE_LED_STYLE: TCh5SegmentedGaugeGaugeLedStyle[];
    static readonly STATE_GRAPHIC: TCh5SegmentedGaugeStateGraphic[];
    static readonly COMPONENT_DATA: any;
    static readonly SIGNAL_ATTRIBUTE_TYPES: Ch5SignalElementAttributeRegistryEntries;
    static readonly COMPONENT_PROPERTIES: ICh5PropertySettings[];
    static readonly ELEMENT_NAME = "ch5-segmented-gauge";
    primaryCssClass: string;
    private _ch5Properties;
    private _elContainer;
    private defaultMaxValue;
    private defaultMinValue;
    private mouseDown;
    private mouseDragEnd;
    private mouseLeave;
    private eventHandler;
    private _dirtyValue;
    private _cleanValue;
    private debounceSignalHandling;
    private handleDebounceSignal;
    private setDirtyHandler;
    set orientation(value: TCh5SegmentedGaugeOrientation);
    get orientation(): TCh5SegmentedGaugeOrientation;
    set gaugeLedStyle(value: TCh5SegmentedGaugeGaugeLedStyle);
    get gaugeLedStyle(): TCh5SegmentedGaugeGaugeLedStyle;
    set primaryStateGraphic(value: TCh5SegmentedGaugeStateGraphic);
    get primaryStateGraphic(): TCh5SegmentedGaugeStateGraphic;
    set secondaryStateGraphic(value: TCh5SegmentedGaugeStateGraphic);
    get secondaryStateGraphic(): TCh5SegmentedGaugeStateGraphic;
    set tertiaryStateGraphic(value: TCh5SegmentedGaugeStateGraphic);
    get tertiaryStateGraphic(): TCh5SegmentedGaugeStateGraphic;
    set minValue(value: number);
    get minValue(): number;
    set maxValue(value: number);
    get maxValue(): number;
    set numberOfSegments(value: number);
    get numberOfSegments(): number;
    set value(value: number);
    get value(): number;
    set touchSettable(value: boolean);
    get touchSettable(): boolean;
    set sendEventOnClick(value: string);
    get sendEventOnClick(): string;
    set sendEventOnChange(value: string);
    get sendEventOnChange(): string;
    set receiveStateValue(value: string);
    get receiveStateValue(): string;
    static registerSignalAttributeTypes(): void;
    static registerCustomElement(): void;
    constructor();
    static get observedAttributes(): string[];
    attributeChangedCallback(attr: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected createInternalHtml(): void;
    protected initAttributes(): void;
    protected attachEventListeners(): void;
    protected removeEventListeners(): void;
    protected unsubscribeFromSignals(): void;
    private clearComponentContent;
    private handleOrientation;
    private handleGaugeLedStyle;
    private handleNumberOfSegments;
    private handleMouseOverEvent;
    private handleMouseUpEvent;
    private handleTouchMoveEvent;
    private handleDragEndEvent;
    private handleIndexValue;
    private handleMouseDown;
    private handleMouseLeave;
    private handleTouchStart;
    private handleTouchMove;
    private handleTouchSettable;
    private handleSendEventOnClick;
    private handleSendEventOnChange;
    private setValueForSegments;
    private initCssClass;
    protected getTargetElementForCssClassesAndStyle(): HTMLElement;
    getCssClassDisabled(): string;
}
